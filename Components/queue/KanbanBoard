import React from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  UserPlus, 
  Send, 
  AlertTriangle, 
  Mail,
  MessageSquare,
  Share2
} from "lucide-react";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import { format } from "date-fns";

const sourceIcon = {
  email: Mail,
  social: Share2,
  survey: MessageSquare,
  chat: MessageSquare
};

const sentimentColor = {
  positive: "bg-[#28A745]/20 text-[#28A745] border-[#28A745]/30",
  neutral: "bg-[#FD7E14]/20 text-[#FD7E14] border-[#FD7E14]/30",
  negative: "bg-[#DC3545]/20 text-[#DC3545] border-[#DC3545]/30"
};

const columns = [
  { id: "new", title: "New Alerts", color: "border-[#007BFF]" },
  { id: "in_progress", title: "In Progress", color: "border-[#FD7E14]" },
  { id: "resolved", title: "Resolved", color: "border-[#28A745]" }
];

export default function KanbanBoard({ alerts, onDragEnd, onAssign, onSendResponse }) {
  const getAlertsByStatus = (status) => {
    return alerts.filter(alert => alert.status === status);
  };

  return (
    <DragDropContext onDragEnd={onDragEnd}>
      <div className="grid md:grid-cols-3 gap-6">
        {columns.map(column => {
          const columnAlerts = getAlertsByStatus(column.id);
          
          return (
            <div key={column.id} className="space-y-4">
              <div className={`border-t-4 ${column.color} bg-[#242942] rounded-t-lg p-4`}>
                <h3 className="text-lg font-bold text-white">{column.title}</h3>
                <p className="text-sm text-gray-400">{columnAlerts.length} items</p>
              </div>

              <Droppable droppableId={column.id}>
                {(provided, snapshot) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                    className={`space-y-3 min-h-[400px] p-2 rounded-lg transition-colors ${
                      snapshot.isDraggingOver ? 'bg-[#1a1d2e]' : ''
                    }`}
                  >
                    {columnAlerts.map((alert, index) => {
                      const SourceIcon = sourceIcon[alert.source];
                      
                      return (
                        <Draggable 
                          key={alert.id} 
                          draggableId={alert.id} 
                          index={index}
                        >
                          {(provided, snapshot) => (
                            <Card
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className={`bg-[#1a1d2e] border-[#2d3250] p-4 ${
                                snapshot.isDragging ? 'shadow-2xl shadow-[#007BFF]/20' : ''
                              }`}
                            >
                              <div className="space-y-3">
                                <div className="flex items-start justify-between">
                                  <div className="flex items-center gap-2">
                                    <div className="w-8 h-8 rounded-full bg-[#007BFF] flex items-center justify-center">
                                      <span className="text-white text-sm font-semibold">
                                        {alert.customer_name.charAt(0)}
                                      </span>
                                    </div>
                                    <div>
                                      <p className="font-semibold text-white text-sm">
                                        {alert.customer_name}
                                      </p>
                                      <p className="text-xs text-gray-400">
                                        {alert.customer_email}
                                      </p>
                                    </div>
                                  </div>
                                  <SourceIcon className="w-4 h-4 text-gray-400" />
                                </div>

                                <p className="text-sm text-gray-300 line-clamp-3">
                                  {alert.message}
                                </p>

                                <div className="flex items-center gap-2 flex-wrap">
                                  <Badge className={sentimentColor[alert.sentiment_type]}>
                                    {alert.sentiment_type}
                                  </Badge>
                                  <span className="text-xs text-gray-500">
                                    {format(new Date(alert.created_date), "MMM d")}
                                  </span>
                                </div>

                                {column.id === "new" && (
                                  <>
                                    <Textarea
                                      placeholder="Type your response..."
                                      className="bg-[#242942] border-[#2d3250] text-white text-sm"
                                      rows={2}
                                    />
                                    <div className="flex gap-2">
                                      <Button
                                        size="sm"
                                        className="flex-1 bg-[#007BFF] hover:bg-[#0056b3]"
                                        onClick={() => onAssign(alert.id)}
                                      >
                                        <UserPlus className="w-3 h-3 mr-1" />
                                        Assign
                                      </Button>
                                      <Button
                                        size="sm"
                                        className="flex-1 bg-[#28A745] hover:bg-[#1e7e34]"
                                        onClick={() => onSendResponse(alert.id)}
                                      >
                                        <Send className="w-3 h-3 mr-1" />
                                        Send
                                      </Button>
                                    </div>
                                  </>
                                )}

                                {column.id === "in_progress" && alert.assigned_to && (
                                  <div className="flex items-center gap-2 text-xs text-gray-400">
                                    <UserPlus className="w-3 h-3" />
                                    <span>Assigned to {alert.assigned_to}</span>
                                  </div>
                                )}
                              </div>
                            </Card>
                          )}
                        </Draggable>
                      );
                    })}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </div>
          );
        })}
      </div>
    </DragDropContext>
  );
}
